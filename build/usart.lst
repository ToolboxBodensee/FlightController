ARM GAS  /tmp/ccujVUBi.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"usart.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
  21              		.align	2
  22              		.global	MX_USART1_UART_Init
  23              		.thumb
  24              		.thumb_func
  26              	MX_USART1_UART_Init:
  27              	.LFB125:
  28              		.file 1 "Src/usart.c"
   1:Src/usart.c   **** /**
   2:Src/usart.c   ****   ******************************************************************************
   3:Src/usart.c   ****   * File Name          : USART.c
   4:Src/usart.c   ****   * Description        : This file provides code for the configuration
   5:Src/usart.c   ****   *                      of the USART instances.
   6:Src/usart.c   ****   ******************************************************************************
   7:Src/usart.c   ****   ** This notice applies to any and all portions of this file
   8:Src/usart.c   ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/usart.c   ****   * USER CODE END. Other portions of this file, whether 
  10:Src/usart.c   ****   * inserted by the user or by software development tools
  11:Src/usart.c   ****   * are owned by their respective copyright owners.
  12:Src/usart.c   ****   *
  13:Src/usart.c   ****   * COPYRIGHT(c) 2017 STMicroelectronics
  14:Src/usart.c   ****   *
  15:Src/usart.c   ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/usart.c   ****   * are permitted provided that the following conditions are met:
  17:Src/usart.c   ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/usart.c   ****   *      this list of conditions and the following disclaimer.
  19:Src/usart.c   ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/usart.c   ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/usart.c   ****   *      and/or other materials provided with the distribution.
  22:Src/usart.c   ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/usart.c   ****   *      may be used to endorse or promote products derived from this software
  24:Src/usart.c   ****   *      without specific prior written permission.
  25:Src/usart.c   ****   *
  26:Src/usart.c   ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/usart.c   ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/usart.c   ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/usart.c   ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/usart.c   ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /tmp/ccujVUBi.s 			page 2


  31:Src/usart.c   ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/usart.c   ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/usart.c   ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/usart.c   ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/usart.c   ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/usart.c   ****   *
  37:Src/usart.c   ****   ******************************************************************************
  38:Src/usart.c   ****   */
  39:Src/usart.c   **** 
  40:Src/usart.c   **** /* Includes ------------------------------------------------------------------*/
  41:Src/usart.c   **** #include "usart.h"
  42:Src/usart.c   **** 
  43:Src/usart.c   **** #include "gpio.h"
  44:Src/usart.c   **** #include "dma.h"
  45:Src/usart.c   **** 
  46:Src/usart.c   **** /* USER CODE BEGIN 0 */
  47:Src/usart.c   **** 
  48:Src/usart.c   **** /* USER CODE END 0 */
  49:Src/usart.c   **** 
  50:Src/usart.c   **** UART_HandleTypeDef huart1;
  51:Src/usart.c   **** UART_HandleTypeDef huart2;
  52:Src/usart.c   **** DMA_HandleTypeDef hdma_usart1_rx;
  53:Src/usart.c   **** DMA_HandleTypeDef hdma_usart1_tx;
  54:Src/usart.c   **** DMA_HandleTypeDef hdma_usart2_rx;
  55:Src/usart.c   **** DMA_HandleTypeDef hdma_usart2_tx;
  56:Src/usart.c   **** 
  57:Src/usart.c   **** /* USART1 init function */
  58:Src/usart.c   **** 
  59:Src/usart.c   **** void MX_USART1_UART_Init(void)
  60:Src/usart.c   **** {
  29              		.loc 1 60 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
  61:Src/usart.c   **** 
  62:Src/usart.c   ****   huart1.Instance = USART1;
  38              		.loc 1 62 0
  39 0002 0D48     		ldr	r0, .L4
  40 0004 0D4B     		ldr	r3, .L4+4
  41 0006 0360     		str	r3, [r0]
  63:Src/usart.c   ****   huart1.Init.BaudRate = 98000;
  42              		.loc 1 63 0
  43 0008 0D4B     		ldr	r3, .L4+8
  44 000a 4360     		str	r3, [r0, #4]
  64:Src/usart.c   ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
  45              		.loc 1 64 0
  46 000c 0023     		movs	r3, #0
  47 000e 8360     		str	r3, [r0, #8]
  65:Src/usart.c   ****   huart1.Init.StopBits = UART_STOPBITS_2;
  48              		.loc 1 65 0
  49 0010 4FF40052 		mov	r2, #8192
  50 0014 C260     		str	r2, [r0, #12]
ARM GAS  /tmp/ccujVUBi.s 			page 3


  66:Src/usart.c   ****   huart1.Init.Parity = UART_PARITY_EVEN;
  51              		.loc 1 66 0
  52 0016 4FF48062 		mov	r2, #1024
  53 001a 0261     		str	r2, [r0, #16]
  67:Src/usart.c   ****   huart1.Init.Mode = UART_MODE_TX_RX;
  54              		.loc 1 67 0
  55 001c 0C22     		movs	r2, #12
  56 001e 4261     		str	r2, [r0, #20]
  68:Src/usart.c   ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  57              		.loc 1 68 0
  58 0020 8361     		str	r3, [r0, #24]
  69:Src/usart.c   ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  59              		.loc 1 69 0
  60 0022 C361     		str	r3, [r0, #28]
  70:Src/usart.c   ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  61              		.loc 1 70 0
  62 0024 0362     		str	r3, [r0, #32]
  71:Src/usart.c   ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  63              		.loc 1 71 0
  64 0026 4362     		str	r3, [r0, #36]
  72:Src/usart.c   ****   if (HAL_UART_Init(&huart1) != HAL_OK)
  65              		.loc 1 72 0
  66 0028 FFF7FEFF 		bl	HAL_UART_Init
  67              	.LVL0:
  68 002c 18B1     		cbz	r0, .L1
  73:Src/usart.c   ****   {
  74:Src/usart.c   ****     _Error_Handler(__FILE__, __LINE__);
  69              		.loc 1 74 0
  70 002e 0548     		ldr	r0, .L4+12
  71 0030 4A21     		movs	r1, #74
  72 0032 FFF7FEFF 		bl	_Error_Handler
  73              	.LVL1:
  74              	.L1:
  75 0036 08BD     		pop	{r3, pc}
  76              	.L5:
  77              		.align	2
  78              	.L4:
  79 0038 00000000 		.word	huart1
  80 003c 00380140 		.word	1073821696
  81 0040 D07E0100 		.word	98000
  82 0044 00000000 		.word	.LC0
  83              		.cfi_endproc
  84              	.LFE125:
  86              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
  87              		.align	2
  88              		.global	MX_USART2_UART_Init
  89              		.thumb
  90              		.thumb_func
  92              	MX_USART2_UART_Init:
  93              	.LFB126:
  75:Src/usart.c   ****   }
  76:Src/usart.c   **** 
  77:Src/usart.c   **** }
  78:Src/usart.c   **** /* USART2 init function */
  79:Src/usart.c   **** 
  80:Src/usart.c   **** void MX_USART2_UART_Init(void)
  81:Src/usart.c   **** {
ARM GAS  /tmp/ccujVUBi.s 			page 4


  94              		.loc 1 81 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98 0000 08B5     		push	{r3, lr}
  99              	.LCFI1:
 100              		.cfi_def_cfa_offset 8
 101              		.cfi_offset 3, -8
 102              		.cfi_offset 14, -4
  82:Src/usart.c   **** 
  83:Src/usart.c   ****   huart2.Instance = USART2;
 103              		.loc 1 83 0
 104 0002 0C48     		ldr	r0, .L9
 105 0004 0C4B     		ldr	r3, .L9+4
 106 0006 0360     		str	r3, [r0]
  84:Src/usart.c   ****   huart2.Init.BaudRate = 9600;
 107              		.loc 1 84 0
 108 0008 4FF41653 		mov	r3, #9600
 109 000c 4360     		str	r3, [r0, #4]
  85:Src/usart.c   ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 110              		.loc 1 85 0
 111 000e 0023     		movs	r3, #0
 112 0010 8360     		str	r3, [r0, #8]
  86:Src/usart.c   ****   huart2.Init.StopBits = UART_STOPBITS_1;
 113              		.loc 1 86 0
 114 0012 C360     		str	r3, [r0, #12]
  87:Src/usart.c   ****   huart2.Init.Parity = UART_PARITY_NONE;
 115              		.loc 1 87 0
 116 0014 0361     		str	r3, [r0, #16]
  88:Src/usart.c   ****   huart2.Init.Mode = UART_MODE_TX_RX;
 117              		.loc 1 88 0
 118 0016 0C22     		movs	r2, #12
 119 0018 4261     		str	r2, [r0, #20]
  89:Src/usart.c   ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 120              		.loc 1 89 0
 121 001a 8361     		str	r3, [r0, #24]
  90:Src/usart.c   ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 122              		.loc 1 90 0
 123 001c C361     		str	r3, [r0, #28]
  91:Src/usart.c   ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 124              		.loc 1 91 0
 125 001e 0362     		str	r3, [r0, #32]
  92:Src/usart.c   ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 126              		.loc 1 92 0
 127 0020 4362     		str	r3, [r0, #36]
  93:Src/usart.c   ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 128              		.loc 1 93 0
 129 0022 FFF7FEFF 		bl	HAL_UART_Init
 130              	.LVL2:
 131 0026 18B1     		cbz	r0, .L6
  94:Src/usart.c   ****   {
  95:Src/usart.c   ****     _Error_Handler(__FILE__, __LINE__);
 132              		.loc 1 95 0
 133 0028 0448     		ldr	r0, .L9+8
 134 002a 5F21     		movs	r1, #95
 135 002c FFF7FEFF 		bl	_Error_Handler
 136              	.LVL3:
ARM GAS  /tmp/ccujVUBi.s 			page 5


 137              	.L6:
 138 0030 08BD     		pop	{r3, pc}
 139              	.L10:
 140 0032 00BF     		.align	2
 141              	.L9:
 142 0034 00000000 		.word	huart2
 143 0038 00440040 		.word	1073759232
 144 003c 00000000 		.word	.LC0
 145              		.cfi_endproc
 146              	.LFE126:
 148              		.section	.text.HAL_UART_MspInit,"ax",%progbits
 149              		.align	2
 150              		.global	HAL_UART_MspInit
 151              		.thumb
 152              		.thumb_func
 154              	HAL_UART_MspInit:
 155              	.LFB127:
  96:Src/usart.c   ****   }
  97:Src/usart.c   **** 
  98:Src/usart.c   **** }
  99:Src/usart.c   **** 
 100:Src/usart.c   **** void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
 101:Src/usart.c   **** {
 156              		.loc 1 101 0
 157              		.cfi_startproc
 158              		@ args = 0, pretend = 0, frame = 32
 159              		@ frame_needed = 0, uses_anonymous_args = 0
 160              	.LVL4:
 161 0000 30B5     		push	{r4, r5, lr}
 162              	.LCFI2:
 163              		.cfi_def_cfa_offset 12
 164              		.cfi_offset 4, -12
 165              		.cfi_offset 5, -8
 166              		.cfi_offset 14, -4
 167 0002 89B0     		sub	sp, sp, #36
 168              	.LCFI3:
 169              		.cfi_def_cfa_offset 48
 170 0004 0446     		mov	r4, r0
 102:Src/usart.c   **** 
 103:Src/usart.c   ****   GPIO_InitTypeDef GPIO_InitStruct;
 104:Src/usart.c   ****   if(uartHandle->Instance==USART1)
 171              		.loc 1 104 0
 172 0006 0368     		ldr	r3, [r0]
 173 0008 584A     		ldr	r2, .L19
 174 000a 9342     		cmp	r3, r2
 175 000c 54D1     		bne	.L12
 176              	.LBB2:
 105:Src/usart.c   ****   {
 106:Src/usart.c   ****   /* USER CODE BEGIN USART1_MspInit 0 */
 107:Src/usart.c   **** 
 108:Src/usart.c   ****   /* USER CODE END USART1_MspInit 0 */
 109:Src/usart.c   ****     /* USART1 clock enable */
 110:Src/usart.c   ****     __HAL_RCC_USART1_CLK_ENABLE();
 177              		.loc 1 110 0
 178 000e 584B     		ldr	r3, .L19+4
 179 0010 1A6E     		ldr	r2, [r3, #96]
 180 0012 42F48042 		orr	r2, r2, #16384
ARM GAS  /tmp/ccujVUBi.s 			page 6


 181 0016 1A66     		str	r2, [r3, #96]
 182 0018 1B6E     		ldr	r3, [r3, #96]
 183 001a 03F48043 		and	r3, r3, #16384
 184 001e 0193     		str	r3, [sp, #4]
 185 0020 019B     		ldr	r3, [sp, #4]
 186              	.LBE2:
 111:Src/usart.c   ****   
 112:Src/usart.c   ****     /**USART1 GPIO Configuration    
 113:Src/usart.c   ****     PA9     ------> USART1_TX
 114:Src/usart.c   ****     PA10     ------> USART1_RX 
 115:Src/usart.c   ****     */
 116:Src/usart.c   ****     GPIO_InitStruct.Pin = SBUS_TX_Pin|SBUS_RX_Pin;
 187              		.loc 1 116 0
 188 0022 4FF4C063 		mov	r3, #1536
 189 0026 0393     		str	r3, [sp, #12]
 117:Src/usart.c   ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 190              		.loc 1 117 0
 191 0028 0225     		movs	r5, #2
 192 002a 0495     		str	r5, [sp, #16]
 118:Src/usart.c   ****     GPIO_InitStruct.Pull = GPIO_PULLUP;
 193              		.loc 1 118 0
 194 002c 0123     		movs	r3, #1
 195 002e 0593     		str	r3, [sp, #20]
 119:Src/usart.c   ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 196              		.loc 1 119 0
 197 0030 0323     		movs	r3, #3
 198 0032 0693     		str	r3, [sp, #24]
 120:Src/usart.c   ****     GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 199              		.loc 1 120 0
 200 0034 0723     		movs	r3, #7
 201 0036 0793     		str	r3, [sp, #28]
 121:Src/usart.c   ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 202              		.loc 1 121 0
 203 0038 4FF09040 		mov	r0, #1207959552
 204              	.LVL5:
 205 003c 03A9     		add	r1, sp, #12
 206 003e FFF7FEFF 		bl	HAL_GPIO_Init
 207              	.LVL6:
 122:Src/usart.c   **** 
 123:Src/usart.c   ****     /* USART1 DMA Init */
 124:Src/usart.c   ****     /* USART1_RX Init */
 125:Src/usart.c   ****     hdma_usart1_rx.Instance = DMA1_Channel5;
 208              		.loc 1 125 0
 209 0042 4C48     		ldr	r0, .L19+8
 210 0044 4C4B     		ldr	r3, .L19+12
 211 0046 0360     		str	r3, [r0]
 126:Src/usart.c   ****     hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 212              		.loc 1 126 0
 213 0048 4560     		str	r5, [r0, #4]
 127:Src/usart.c   ****     hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 214              		.loc 1 127 0
 215 004a 0023     		movs	r3, #0
 216 004c 8360     		str	r3, [r0, #8]
 128:Src/usart.c   ****     hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 217              		.loc 1 128 0
 218 004e C360     		str	r3, [r0, #12]
 129:Src/usart.c   ****     hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
ARM GAS  /tmp/ccujVUBi.s 			page 7


 219              		.loc 1 129 0
 220 0050 8022     		movs	r2, #128
 221 0052 0261     		str	r2, [r0, #16]
 130:Src/usart.c   ****     hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 222              		.loc 1 130 0
 223 0054 4361     		str	r3, [r0, #20]
 131:Src/usart.c   ****     hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 224              		.loc 1 131 0
 225 0056 8361     		str	r3, [r0, #24]
 132:Src/usart.c   ****     hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 226              		.loc 1 132 0
 227 0058 C361     		str	r3, [r0, #28]
 133:Src/usart.c   ****     hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 228              		.loc 1 133 0
 229 005a 4FF48053 		mov	r3, #4096
 230 005e 0362     		str	r3, [r0, #32]
 134:Src/usart.c   ****     if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 231              		.loc 1 134 0
 232 0060 FFF7FEFF 		bl	HAL_DMA_Init
 233              	.LVL7:
 234 0064 18B1     		cbz	r0, .L13
 135:Src/usart.c   ****     {
 136:Src/usart.c   ****       _Error_Handler(__FILE__, __LINE__);
 235              		.loc 1 136 0
 236 0066 4548     		ldr	r0, .L19+16
 237 0068 8821     		movs	r1, #136
 238 006a FFF7FEFF 		bl	_Error_Handler
 239              	.LVL8:
 240              	.L13:
 137:Src/usart.c   ****     }
 138:Src/usart.c   **** 
 139:Src/usart.c   ****     __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 241              		.loc 1 139 0
 242 006e 414B     		ldr	r3, .L19+8
 243 0070 E366     		str	r3, [r4, #108]
 244 0072 9C62     		str	r4, [r3, #40]
 140:Src/usart.c   **** 
 141:Src/usart.c   ****     /* USART1_TX Init */
 142:Src/usart.c   ****     hdma_usart1_tx.Instance = DMA1_Channel4;
 245              		.loc 1 142 0
 246 0074 4248     		ldr	r0, .L19+20
 247 0076 434B     		ldr	r3, .L19+24
 248 0078 0360     		str	r3, [r0]
 143:Src/usart.c   ****     hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 249              		.loc 1 143 0
 250 007a 0223     		movs	r3, #2
 251 007c 4360     		str	r3, [r0, #4]
 144:Src/usart.c   ****     hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 252              		.loc 1 144 0
 253 007e 1023     		movs	r3, #16
 254 0080 8360     		str	r3, [r0, #8]
 145:Src/usart.c   ****     hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 255              		.loc 1 145 0
 256 0082 0023     		movs	r3, #0
 257 0084 C360     		str	r3, [r0, #12]
 146:Src/usart.c   ****     hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 258              		.loc 1 146 0
ARM GAS  /tmp/ccujVUBi.s 			page 8


 259 0086 8022     		movs	r2, #128
 260 0088 0261     		str	r2, [r0, #16]
 147:Src/usart.c   ****     hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 261              		.loc 1 147 0
 262 008a 4361     		str	r3, [r0, #20]
 148:Src/usart.c   ****     hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 263              		.loc 1 148 0
 264 008c 8361     		str	r3, [r0, #24]
 149:Src/usart.c   ****     hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 265              		.loc 1 149 0
 266 008e C361     		str	r3, [r0, #28]
 150:Src/usart.c   ****     hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 267              		.loc 1 150 0
 268 0090 0362     		str	r3, [r0, #32]
 151:Src/usart.c   ****     if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 269              		.loc 1 151 0
 270 0092 FFF7FEFF 		bl	HAL_DMA_Init
 271              	.LVL9:
 272 0096 18B1     		cbz	r0, .L14
 152:Src/usart.c   ****     {
 153:Src/usart.c   ****       _Error_Handler(__FILE__, __LINE__);
 273              		.loc 1 153 0
 274 0098 3848     		ldr	r0, .L19+16
 275 009a 9921     		movs	r1, #153
 276 009c FFF7FEFF 		bl	_Error_Handler
 277              	.LVL10:
 278              	.L14:
 154:Src/usart.c   ****     }
 155:Src/usart.c   **** 
 156:Src/usart.c   ****     __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 279              		.loc 1 156 0
 280 00a0 374B     		ldr	r3, .L19+20
 281 00a2 A366     		str	r3, [r4, #104]
 282 00a4 9C62     		str	r4, [r3, #40]
 157:Src/usart.c   **** 
 158:Src/usart.c   ****     /* USART1 interrupt Init */
 159:Src/usart.c   ****     HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 283              		.loc 1 159 0
 284 00a6 2520     		movs	r0, #37
 285 00a8 0021     		movs	r1, #0
 286 00aa 0A46     		mov	r2, r1
 287 00ac FFF7FEFF 		bl	HAL_NVIC_SetPriority
 288              	.LVL11:
 160:Src/usart.c   ****     HAL_NVIC_EnableIRQ(USART1_IRQn);
 289              		.loc 1 160 0
 290 00b0 2520     		movs	r0, #37
 291 00b2 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 292              	.LVL12:
 293 00b6 57E0     		b	.L11
 294              	.LVL13:
 295              	.L12:
 161:Src/usart.c   ****   /* USER CODE BEGIN USART1_MspInit 1 */
 162:Src/usart.c   **** 
 163:Src/usart.c   ****   /* USER CODE END USART1_MspInit 1 */
 164:Src/usart.c   ****   }
 165:Src/usart.c   ****   else if(uartHandle->Instance==USART2)
 296              		.loc 1 165 0
ARM GAS  /tmp/ccujVUBi.s 			page 9


 297 00b8 334A     		ldr	r2, .L19+28
 298 00ba 9342     		cmp	r3, r2
 299 00bc 54D1     		bne	.L11
 300              	.LBB3:
 166:Src/usart.c   ****   {
 167:Src/usart.c   ****   /* USER CODE BEGIN USART2_MspInit 0 */
 168:Src/usart.c   **** 
 169:Src/usart.c   ****   /* USER CODE END USART2_MspInit 0 */
 170:Src/usart.c   ****     /* USART2 clock enable */
 171:Src/usart.c   ****     __HAL_RCC_USART2_CLK_ENABLE();
 301              		.loc 1 171 0
 302 00be 2C4B     		ldr	r3, .L19+4
 303 00c0 9A6D     		ldr	r2, [r3, #88]
 304 00c2 42F40032 		orr	r2, r2, #131072
 305 00c6 9A65     		str	r2, [r3, #88]
 306 00c8 9B6D     		ldr	r3, [r3, #88]
 307 00ca 03F40033 		and	r3, r3, #131072
 308 00ce 0293     		str	r3, [sp, #8]
 309 00d0 029B     		ldr	r3, [sp, #8]
 310              	.LBE3:
 172:Src/usart.c   ****   
 173:Src/usart.c   ****     /**USART2 GPIO Configuration    
 174:Src/usart.c   ****     PA2     ------> USART2_TX
 175:Src/usart.c   ****     PA3     ------> USART2_RX 
 176:Src/usart.c   ****     */
 177:Src/usart.c   ****     GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 311              		.loc 1 177 0
 312 00d2 0C23     		movs	r3, #12
 313 00d4 0393     		str	r3, [sp, #12]
 178:Src/usart.c   ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 314              		.loc 1 178 0
 315 00d6 0225     		movs	r5, #2
 316 00d8 0495     		str	r5, [sp, #16]
 179:Src/usart.c   ****     GPIO_InitStruct.Pull = GPIO_PULLUP;
 317              		.loc 1 179 0
 318 00da 0123     		movs	r3, #1
 319 00dc 0593     		str	r3, [sp, #20]
 180:Src/usart.c   ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 320              		.loc 1 180 0
 321 00de 0323     		movs	r3, #3
 322 00e0 0693     		str	r3, [sp, #24]
 181:Src/usart.c   ****     GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 323              		.loc 1 181 0
 324 00e2 0723     		movs	r3, #7
 325 00e4 0793     		str	r3, [sp, #28]
 182:Src/usart.c   ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 326              		.loc 1 182 0
 327 00e6 4FF09040 		mov	r0, #1207959552
 328              	.LVL14:
 329 00ea 03A9     		add	r1, sp, #12
 330 00ec FFF7FEFF 		bl	HAL_GPIO_Init
 331              	.LVL15:
 183:Src/usart.c   **** 
 184:Src/usart.c   ****     /* USART2 DMA Init */
 185:Src/usart.c   ****     /* USART2_RX Init */
 186:Src/usart.c   ****     hdma_usart2_rx.Instance = DMA1_Channel6;
 332              		.loc 1 186 0
ARM GAS  /tmp/ccujVUBi.s 			page 10


 333 00f0 2648     		ldr	r0, .L19+32
 334 00f2 274B     		ldr	r3, .L19+36
 335 00f4 0360     		str	r3, [r0]
 187:Src/usart.c   ****     hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 336              		.loc 1 187 0
 337 00f6 4560     		str	r5, [r0, #4]
 188:Src/usart.c   ****     hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 338              		.loc 1 188 0
 339 00f8 0023     		movs	r3, #0
 340 00fa 8360     		str	r3, [r0, #8]
 189:Src/usart.c   ****     hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 341              		.loc 1 189 0
 342 00fc C360     		str	r3, [r0, #12]
 190:Src/usart.c   ****     hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 343              		.loc 1 190 0
 344 00fe 8022     		movs	r2, #128
 345 0100 0261     		str	r2, [r0, #16]
 191:Src/usart.c   ****     hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 346              		.loc 1 191 0
 347 0102 4361     		str	r3, [r0, #20]
 192:Src/usart.c   ****     hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 348              		.loc 1 192 0
 349 0104 8361     		str	r3, [r0, #24]
 193:Src/usart.c   ****     hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 350              		.loc 1 193 0
 351 0106 C361     		str	r3, [r0, #28]
 194:Src/usart.c   ****     hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 352              		.loc 1 194 0
 353 0108 4FF48053 		mov	r3, #4096
 354 010c 0362     		str	r3, [r0, #32]
 195:Src/usart.c   ****     if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 355              		.loc 1 195 0
 356 010e FFF7FEFF 		bl	HAL_DMA_Init
 357              	.LVL16:
 358 0112 18B1     		cbz	r0, .L16
 196:Src/usart.c   ****     {
 197:Src/usart.c   ****       _Error_Handler(__FILE__, __LINE__);
 359              		.loc 1 197 0
 360 0114 1948     		ldr	r0, .L19+16
 361 0116 C521     		movs	r1, #197
 362 0118 FFF7FEFF 		bl	_Error_Handler
 363              	.LVL17:
 364              	.L16:
 198:Src/usart.c   ****     }
 199:Src/usart.c   **** 
 200:Src/usart.c   ****     __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 365              		.loc 1 200 0
 366 011c 1B4B     		ldr	r3, .L19+32
 367 011e E366     		str	r3, [r4, #108]
 368 0120 9C62     		str	r4, [r3, #40]
 201:Src/usart.c   **** 
 202:Src/usart.c   ****     /* USART2_TX Init */
 203:Src/usart.c   ****     hdma_usart2_tx.Instance = DMA1_Channel7;
 369              		.loc 1 203 0
 370 0122 1C48     		ldr	r0, .L19+40
 371 0124 1C4B     		ldr	r3, .L19+44
 372 0126 0360     		str	r3, [r0]
ARM GAS  /tmp/ccujVUBi.s 			page 11


 204:Src/usart.c   ****     hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 373              		.loc 1 204 0
 374 0128 0223     		movs	r3, #2
 375 012a 4360     		str	r3, [r0, #4]
 205:Src/usart.c   ****     hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 376              		.loc 1 205 0
 377 012c 1023     		movs	r3, #16
 378 012e 8360     		str	r3, [r0, #8]
 206:Src/usart.c   ****     hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 379              		.loc 1 206 0
 380 0130 0023     		movs	r3, #0
 381 0132 C360     		str	r3, [r0, #12]
 207:Src/usart.c   ****     hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 382              		.loc 1 207 0
 383 0134 8022     		movs	r2, #128
 384 0136 0261     		str	r2, [r0, #16]
 208:Src/usart.c   ****     hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 385              		.loc 1 208 0
 386 0138 4361     		str	r3, [r0, #20]
 209:Src/usart.c   ****     hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 387              		.loc 1 209 0
 388 013a 8361     		str	r3, [r0, #24]
 210:Src/usart.c   ****     hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 389              		.loc 1 210 0
 390 013c C361     		str	r3, [r0, #28]
 211:Src/usart.c   ****     hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 391              		.loc 1 211 0
 392 013e 4FF48053 		mov	r3, #4096
 393 0142 0362     		str	r3, [r0, #32]
 212:Src/usart.c   ****     if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 394              		.loc 1 212 0
 395 0144 FFF7FEFF 		bl	HAL_DMA_Init
 396              	.LVL18:
 397 0148 18B1     		cbz	r0, .L17
 213:Src/usart.c   ****     {
 214:Src/usart.c   ****       _Error_Handler(__FILE__, __LINE__);
 398              		.loc 1 214 0
 399 014a 0C48     		ldr	r0, .L19+16
 400 014c D621     		movs	r1, #214
 401 014e FFF7FEFF 		bl	_Error_Handler
 402              	.LVL19:
 403              	.L17:
 215:Src/usart.c   ****     }
 216:Src/usart.c   **** 
 217:Src/usart.c   ****     __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 404              		.loc 1 217 0
 405 0152 104B     		ldr	r3, .L19+40
 406 0154 A366     		str	r3, [r4, #104]
 407 0156 9C62     		str	r4, [r3, #40]
 218:Src/usart.c   **** 
 219:Src/usart.c   ****     /* USART2 interrupt Init */
 220:Src/usart.c   ****     HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 408              		.loc 1 220 0
 409 0158 2620     		movs	r0, #38
 410 015a 0021     		movs	r1, #0
 411 015c 0A46     		mov	r2, r1
 412 015e FFF7FEFF 		bl	HAL_NVIC_SetPriority
ARM GAS  /tmp/ccujVUBi.s 			page 12


 413              	.LVL20:
 221:Src/usart.c   ****     HAL_NVIC_EnableIRQ(USART2_IRQn);
 414              		.loc 1 221 0
 415 0162 2620     		movs	r0, #38
 416 0164 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 417              	.LVL21:
 418              	.L11:
 222:Src/usart.c   ****   /* USER CODE BEGIN USART2_MspInit 1 */
 223:Src/usart.c   **** 
 224:Src/usart.c   ****   /* USER CODE END USART2_MspInit 1 */
 225:Src/usart.c   ****   }
 226:Src/usart.c   **** }
 419              		.loc 1 226 0
 420 0168 09B0     		add	sp, sp, #36
 421              	.LCFI4:
 422              		.cfi_def_cfa_offset 12
 423              		@ sp needed
 424 016a 30BD     		pop	{r4, r5, pc}
 425              	.LVL22:
 426              	.L20:
 427              		.align	2
 428              	.L19:
 429 016c 00380140 		.word	1073821696
 430 0170 00100240 		.word	1073876992
 431 0174 00000000 		.word	hdma_usart1_rx
 432 0178 58000240 		.word	1073872984
 433 017c 00000000 		.word	.LC0
 434 0180 00000000 		.word	hdma_usart1_tx
 435 0184 44000240 		.word	1073872964
 436 0188 00440040 		.word	1073759232
 437 018c 00000000 		.word	hdma_usart2_rx
 438 0190 6C000240 		.word	1073873004
 439 0194 00000000 		.word	hdma_usart2_tx
 440 0198 80000240 		.word	1073873024
 441              		.cfi_endproc
 442              	.LFE127:
 444              		.section	.text.HAL_UART_MspDeInit,"ax",%progbits
 445              		.align	2
 446              		.global	HAL_UART_MspDeInit
 447              		.thumb
 448              		.thumb_func
 450              	HAL_UART_MspDeInit:
 451              	.LFB128:
 227:Src/usart.c   **** 
 228:Src/usart.c   **** void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
 229:Src/usart.c   **** {
 452              		.loc 1 229 0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 0
 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456              	.LVL23:
 457 0000 10B5     		push	{r4, lr}
 458              	.LCFI5:
 459              		.cfi_def_cfa_offset 8
 460              		.cfi_offset 4, -8
 461              		.cfi_offset 14, -4
 462 0002 0446     		mov	r4, r0
ARM GAS  /tmp/ccujVUBi.s 			page 13


 230:Src/usart.c   **** 
 231:Src/usart.c   ****   if(uartHandle->Instance==USART1)
 463              		.loc 1 231 0
 464 0004 0368     		ldr	r3, [r0]
 465 0006 184A     		ldr	r2, .L25
 466 0008 9342     		cmp	r3, r2
 467 000a 15D1     		bne	.L22
 232:Src/usart.c   ****   {
 233:Src/usart.c   ****   /* USER CODE BEGIN USART1_MspDeInit 0 */
 234:Src/usart.c   **** 
 235:Src/usart.c   ****   /* USER CODE END USART1_MspDeInit 0 */
 236:Src/usart.c   ****     /* Peripheral clock disable */
 237:Src/usart.c   ****     __HAL_RCC_USART1_CLK_DISABLE();
 468              		.loc 1 237 0
 469 000c 02F55842 		add	r2, r2, #55296
 470 0010 136E     		ldr	r3, [r2, #96]
 471 0012 23F48043 		bic	r3, r3, #16384
 472 0016 1366     		str	r3, [r2, #96]
 238:Src/usart.c   ****   
 239:Src/usart.c   ****     /**USART1 GPIO Configuration    
 240:Src/usart.c   ****     PA9     ------> USART1_TX
 241:Src/usart.c   ****     PA10     ------> USART1_RX 
 242:Src/usart.c   ****     */
 243:Src/usart.c   ****     HAL_GPIO_DeInit(GPIOA, SBUS_TX_Pin|SBUS_RX_Pin);
 473              		.loc 1 243 0
 474 0018 4FF09040 		mov	r0, #1207959552
 475              	.LVL24:
 476 001c 4FF4C061 		mov	r1, #1536
 477 0020 FFF7FEFF 		bl	HAL_GPIO_DeInit
 478              	.LVL25:
 244:Src/usart.c   **** 
 245:Src/usart.c   ****     /* USART1 DMA DeInit */
 246:Src/usart.c   ****     HAL_DMA_DeInit(uartHandle->hdmarx);
 479              		.loc 1 246 0
 480 0024 E06E     		ldr	r0, [r4, #108]
 481 0026 FFF7FEFF 		bl	HAL_DMA_DeInit
 482              	.LVL26:
 247:Src/usart.c   ****     HAL_DMA_DeInit(uartHandle->hdmatx);
 483              		.loc 1 247 0
 484 002a A06E     		ldr	r0, [r4, #104]
 485 002c FFF7FEFF 		bl	HAL_DMA_DeInit
 486              	.LVL27:
 248:Src/usart.c   **** 
 249:Src/usart.c   ****     /* USART1 interrupt Deinit */
 250:Src/usart.c   ****     HAL_NVIC_DisableIRQ(USART1_IRQn);
 487              		.loc 1 250 0
 488 0030 2520     		movs	r0, #37
 489 0032 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 490              	.LVL28:
 491 0036 10BD     		pop	{r4, pc}
 492              	.LVL29:
 493              	.L22:
 251:Src/usart.c   ****   /* USER CODE BEGIN USART1_MspDeInit 1 */
 252:Src/usart.c   **** 
 253:Src/usart.c   ****   /* USER CODE END USART1_MspDeInit 1 */
 254:Src/usart.c   ****   }
 255:Src/usart.c   ****   else if(uartHandle->Instance==USART2)
ARM GAS  /tmp/ccujVUBi.s 			page 14


 494              		.loc 1 255 0
 495 0038 0C4A     		ldr	r2, .L25+4
 496 003a 9342     		cmp	r3, r2
 497 003c 13D1     		bne	.L21
 256:Src/usart.c   ****   {
 257:Src/usart.c   ****   /* USER CODE BEGIN USART2_MspDeInit 0 */
 258:Src/usart.c   **** 
 259:Src/usart.c   ****   /* USER CODE END USART2_MspDeInit 0 */
 260:Src/usart.c   ****     /* Peripheral clock disable */
 261:Src/usart.c   ****     __HAL_RCC_USART2_CLK_DISABLE();
 498              		.loc 1 261 0
 499 003e 02F5E632 		add	r2, r2, #117760
 500 0042 936D     		ldr	r3, [r2, #88]
 501 0044 23F40033 		bic	r3, r3, #131072
 502 0048 9365     		str	r3, [r2, #88]
 262:Src/usart.c   ****   
 263:Src/usart.c   ****     /**USART2 GPIO Configuration    
 264:Src/usart.c   ****     PA2     ------> USART2_TX
 265:Src/usart.c   ****     PA3     ------> USART2_RX 
 266:Src/usart.c   ****     */
 267:Src/usart.c   ****     HAL_GPIO_DeInit(GPIOA, VCP_TX_Pin|VCP_RX_Pin);
 503              		.loc 1 267 0
 504 004a 4FF09040 		mov	r0, #1207959552
 505              	.LVL30:
 506 004e 0C21     		movs	r1, #12
 507 0050 FFF7FEFF 		bl	HAL_GPIO_DeInit
 508              	.LVL31:
 268:Src/usart.c   **** 
 269:Src/usart.c   ****     /* USART2 DMA DeInit */
 270:Src/usart.c   ****     HAL_DMA_DeInit(uartHandle->hdmarx);
 509              		.loc 1 270 0
 510 0054 E06E     		ldr	r0, [r4, #108]
 511 0056 FFF7FEFF 		bl	HAL_DMA_DeInit
 512              	.LVL32:
 271:Src/usart.c   ****     HAL_DMA_DeInit(uartHandle->hdmatx);
 513              		.loc 1 271 0
 514 005a A06E     		ldr	r0, [r4, #104]
 515 005c FFF7FEFF 		bl	HAL_DMA_DeInit
 516              	.LVL33:
 272:Src/usart.c   **** 
 273:Src/usart.c   ****     /* USART2 interrupt Deinit */
 274:Src/usart.c   ****     HAL_NVIC_DisableIRQ(USART2_IRQn);
 517              		.loc 1 274 0
 518 0060 2620     		movs	r0, #38
 519 0062 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 520              	.LVL34:
 521              	.L21:
 522 0066 10BD     		pop	{r4, pc}
 523              	.LVL35:
 524              	.L26:
 525              		.align	2
 526              	.L25:
 527 0068 00380140 		.word	1073821696
 528 006c 00440040 		.word	1073759232
 529              		.cfi_endproc
 530              	.LFE128:
 532              		.comm	hdma_usart2_tx,72,4
ARM GAS  /tmp/ccujVUBi.s 			page 15


 533              		.comm	hdma_usart2_rx,72,4
 534              		.comm	hdma_usart1_tx,72,4
 535              		.comm	hdma_usart1_rx,72,4
 536              		.comm	huart2,120,4
 537              		.comm	huart1,120,4
 538              		.section	.rodata.str1.4,"aMS",%progbits,1
 539              		.align	2
 540              	.LC0:
 541 0000 5372632F 		.ascii	"Src/usart.c\000"
 541      75736172 
 541      742E6300 
 542              		.text
 543              	.Letext0:
 544              		.file 2 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l432xx.h"
 545              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 546              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 547              		.file 5 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 548              		.file 6 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio.h"
 549              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
 550              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
 551              		.file 9 "Drivers/CMSIS/Include/core_cm4.h"
 552              		.file 10 "Inc/dma.h"
 553              		.file 11 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_cortex.h"
ARM GAS  /tmp/ccujVUBi.s 			page 16


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usart.c
     /tmp/ccujVUBi.s:21     .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccujVUBi.s:26     .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccujVUBi.s:79     .text.MX_USART1_UART_Init:0000000000000038 $d
                            *COM*:0000000000000078 huart1
     /tmp/ccujVUBi.s:87     .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccujVUBi.s:92     .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccujVUBi.s:142    .text.MX_USART2_UART_Init:0000000000000034 $d
                            *COM*:0000000000000078 huart2
     /tmp/ccujVUBi.s:149    .text.HAL_UART_MspInit:0000000000000000 $t
     /tmp/ccujVUBi.s:154    .text.HAL_UART_MspInit:0000000000000000 HAL_UART_MspInit
     /tmp/ccujVUBi.s:429    .text.HAL_UART_MspInit:000000000000016c $d
                            *COM*:0000000000000048 hdma_usart1_rx
                            *COM*:0000000000000048 hdma_usart1_tx
                            *COM*:0000000000000048 hdma_usart2_rx
                            *COM*:0000000000000048 hdma_usart2_tx
     /tmp/ccujVUBi.s:445    .text.HAL_UART_MspDeInit:0000000000000000 $t
     /tmp/ccujVUBi.s:450    .text.HAL_UART_MspDeInit:0000000000000000 HAL_UART_MspDeInit
     /tmp/ccujVUBi.s:527    .text.HAL_UART_MspDeInit:0000000000000068 $d
     /tmp/ccujVUBi.s:539    .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_UART_Init
_Error_Handler
HAL_GPIO_Init
HAL_DMA_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_GPIO_DeInit
HAL_DMA_DeInit
HAL_NVIC_DisableIRQ
