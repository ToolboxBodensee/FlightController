ARM GAS  /tmp/ccBN37Sa.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"stm32l4xx_it.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.SysTick_Handler,"ax",%progbits
  21              		.align	2
  22              		.global	SysTick_Handler
  23              		.thumb
  24              		.thumb_func
  26              	SysTick_Handler:
  27              	.LFB125:
  28              		.file 1 "Src/stm32l4xx_it.c"
   1:Src/stm32l4xx_it.c **** /**
   2:Src/stm32l4xx_it.c ****   ******************************************************************************
   3:Src/stm32l4xx_it.c ****   * @file    stm32l4xx_it.c
   4:Src/stm32l4xx_it.c ****   * @brief   Interrupt Service Routines.
   5:Src/stm32l4xx_it.c ****   ******************************************************************************
   6:Src/stm32l4xx_it.c ****   *
   7:Src/stm32l4xx_it.c ****   * COPYRIGHT(c) 2017 STMicroelectronics
   8:Src/stm32l4xx_it.c ****   *
   9:Src/stm32l4xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:Src/stm32l4xx_it.c ****   * are permitted provided that the following conditions are met:
  11:Src/stm32l4xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:Src/stm32l4xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:Src/stm32l4xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:Src/stm32l4xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:Src/stm32l4xx_it.c ****   *      and/or other materials provided with the distribution.
  16:Src/stm32l4xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:Src/stm32l4xx_it.c ****   *      may be used to endorse or promote products derived from this software
  18:Src/stm32l4xx_it.c ****   *      without specific prior written permission.
  19:Src/stm32l4xx_it.c ****   *
  20:Src/stm32l4xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:Src/stm32l4xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:Src/stm32l4xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:Src/stm32l4xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:Src/stm32l4xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:Src/stm32l4xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:Src/stm32l4xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:Src/stm32l4xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:Src/stm32l4xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:Src/stm32l4xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:Src/stm32l4xx_it.c ****   *
ARM GAS  /tmp/ccBN37Sa.s 			page 2


  31:Src/stm32l4xx_it.c ****   ******************************************************************************
  32:Src/stm32l4xx_it.c ****   */
  33:Src/stm32l4xx_it.c **** /* Includes ------------------------------------------------------------------*/
  34:Src/stm32l4xx_it.c **** #include "stm32l4xx_hal.h"
  35:Src/stm32l4xx_it.c **** #include "stm32l4xx.h"
  36:Src/stm32l4xx_it.c **** #include "stm32l4xx_it.h"
  37:Src/stm32l4xx_it.c **** 
  38:Src/stm32l4xx_it.c **** /* USER CODE BEGIN 0 */
  39:Src/stm32l4xx_it.c **** 
  40:Src/stm32l4xx_it.c **** /* USER CODE END 0 */
  41:Src/stm32l4xx_it.c **** 
  42:Src/stm32l4xx_it.c **** /* External variables --------------------------------------------------------*/
  43:Src/stm32l4xx_it.c **** extern DMA_HandleTypeDef hdma_i2c1_rx;
  44:Src/stm32l4xx_it.c **** extern DMA_HandleTypeDef hdma_i2c1_tx;
  45:Src/stm32l4xx_it.c **** extern I2C_HandleTypeDef hi2c1;
  46:Src/stm32l4xx_it.c **** extern DMA_HandleTypeDef hdma_usart1_rx;
  47:Src/stm32l4xx_it.c **** extern DMA_HandleTypeDef hdma_usart1_tx;
  48:Src/stm32l4xx_it.c **** extern DMA_HandleTypeDef hdma_usart2_rx;
  49:Src/stm32l4xx_it.c **** extern DMA_HandleTypeDef hdma_usart2_tx;
  50:Src/stm32l4xx_it.c **** extern UART_HandleTypeDef huart1;
  51:Src/stm32l4xx_it.c **** extern UART_HandleTypeDef huart2;
  52:Src/stm32l4xx_it.c **** 
  53:Src/stm32l4xx_it.c **** /******************************************************************************/
  54:Src/stm32l4xx_it.c **** /*            Cortex-M4 Processor Interruption and Exception Handlers         */ 
  55:Src/stm32l4xx_it.c **** /******************************************************************************/
  56:Src/stm32l4xx_it.c **** 
  57:Src/stm32l4xx_it.c **** /**
  58:Src/stm32l4xx_it.c **** * @brief This function handles System tick timer.
  59:Src/stm32l4xx_it.c **** */
  60:Src/stm32l4xx_it.c **** void SysTick_Handler(void)
  61:Src/stm32l4xx_it.c **** {
  29              		.loc 1 61 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
  62:Src/stm32l4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
  63:Src/stm32l4xx_it.c **** 
  64:Src/stm32l4xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
  65:Src/stm32l4xx_it.c ****   HAL_IncTick();
  38              		.loc 1 65 0
  39 0002 FFF7FEFF 		bl	HAL_IncTick
  40              	.LVL0:
  66:Src/stm32l4xx_it.c ****   HAL_SYSTICK_IRQHandler();
  41              		.loc 1 66 0
  42 0006 FFF7FEFF 		bl	HAL_SYSTICK_IRQHandler
  43              	.LVL1:
  44 000a 08BD     		pop	{r3, pc}
  45              		.cfi_endproc
  46              	.LFE125:
  48              		.section	.text.DMA1_Channel4_IRQHandler,"ax",%progbits
  49              		.align	2
  50              		.global	DMA1_Channel4_IRQHandler
ARM GAS  /tmp/ccBN37Sa.s 			page 3


  51              		.thumb
  52              		.thumb_func
  54              	DMA1_Channel4_IRQHandler:
  55              	.LFB126:
  67:Src/stm32l4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
  68:Src/stm32l4xx_it.c **** 
  69:Src/stm32l4xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
  70:Src/stm32l4xx_it.c **** }
  71:Src/stm32l4xx_it.c **** 
  72:Src/stm32l4xx_it.c **** /******************************************************************************/
  73:Src/stm32l4xx_it.c **** /* STM32L4xx Peripheral Interrupt Handlers                                    */
  74:Src/stm32l4xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
  75:Src/stm32l4xx_it.c **** /* For the available peripheral interrupt handler names,                      */
  76:Src/stm32l4xx_it.c **** /* please refer to the startup file (startup_stm32l4xx.s).                    */
  77:Src/stm32l4xx_it.c **** /******************************************************************************/
  78:Src/stm32l4xx_it.c **** 
  79:Src/stm32l4xx_it.c **** /**
  80:Src/stm32l4xx_it.c **** * @brief This function handles DMA1 channel4 global interrupt.
  81:Src/stm32l4xx_it.c **** */
  82:Src/stm32l4xx_it.c **** void DMA1_Channel4_IRQHandler(void)
  83:Src/stm32l4xx_it.c **** {
  56              		.loc 1 83 0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 0, uses_anonymous_args = 0
  60 0000 08B5     		push	{r3, lr}
  61              	.LCFI1:
  62              		.cfi_def_cfa_offset 8
  63              		.cfi_offset 3, -8
  64              		.cfi_offset 14, -4
  84:Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
  85:Src/stm32l4xx_it.c **** 
  86:Src/stm32l4xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 0 */
  87:Src/stm32l4xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart1_tx);
  65              		.loc 1 87 0
  66 0002 0248     		ldr	r0, .L5
  67 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
  68              	.LVL2:
  69 0008 08BD     		pop	{r3, pc}
  70              	.L6:
  71 000a 00BF     		.align	2
  72              	.L5:
  73 000c 00000000 		.word	hdma_usart1_tx
  74              		.cfi_endproc
  75              	.LFE126:
  77              		.section	.text.DMA1_Channel5_IRQHandler,"ax",%progbits
  78              		.align	2
  79              		.global	DMA1_Channel5_IRQHandler
  80              		.thumb
  81              		.thumb_func
  83              	DMA1_Channel5_IRQHandler:
  84              	.LFB127:
  88:Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */
  89:Src/stm32l4xx_it.c **** 
  90:Src/stm32l4xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 1 */
  91:Src/stm32l4xx_it.c **** }
  92:Src/stm32l4xx_it.c **** 
ARM GAS  /tmp/ccBN37Sa.s 			page 4


  93:Src/stm32l4xx_it.c **** /**
  94:Src/stm32l4xx_it.c **** * @brief This function handles DMA1 channel5 global interrupt.
  95:Src/stm32l4xx_it.c **** */
  96:Src/stm32l4xx_it.c **** void DMA1_Channel5_IRQHandler(void)
  97:Src/stm32l4xx_it.c **** {
  85              		.loc 1 97 0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89 0000 08B5     		push	{r3, lr}
  90              	.LCFI2:
  91              		.cfi_def_cfa_offset 8
  92              		.cfi_offset 3, -8
  93              		.cfi_offset 14, -4
  98:Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
  99:Src/stm32l4xx_it.c **** 
 100:Src/stm32l4xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 0 */
 101:Src/stm32l4xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart1_rx);
  94              		.loc 1 101 0
  95 0002 0248     		ldr	r0, .L9
  96 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
  97              	.LVL3:
  98 0008 08BD     		pop	{r3, pc}
  99              	.L10:
 100 000a 00BF     		.align	2
 101              	.L9:
 102 000c 00000000 		.word	hdma_usart1_rx
 103              		.cfi_endproc
 104              	.LFE127:
 106              		.section	.text.DMA1_Channel6_IRQHandler,"ax",%progbits
 107              		.align	2
 108              		.global	DMA1_Channel6_IRQHandler
 109              		.thumb
 110              		.thumb_func
 112              	DMA1_Channel6_IRQHandler:
 113              	.LFB128:
 102:Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
 103:Src/stm32l4xx_it.c **** 
 104:Src/stm32l4xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 1 */
 105:Src/stm32l4xx_it.c **** }
 106:Src/stm32l4xx_it.c **** 
 107:Src/stm32l4xx_it.c **** /**
 108:Src/stm32l4xx_it.c **** * @brief This function handles DMA1 channel6 global interrupt.
 109:Src/stm32l4xx_it.c **** */
 110:Src/stm32l4xx_it.c **** void DMA1_Channel6_IRQHandler(void)
 111:Src/stm32l4xx_it.c **** {
 114              		.loc 1 111 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 0
 117              		@ frame_needed = 0, uses_anonymous_args = 0
 118 0000 08B5     		push	{r3, lr}
 119              	.LCFI3:
 120              		.cfi_def_cfa_offset 8
 121              		.cfi_offset 3, -8
 122              		.cfi_offset 14, -4
 112:Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
 113:Src/stm32l4xx_it.c **** 
ARM GAS  /tmp/ccBN37Sa.s 			page 5


 114:Src/stm32l4xx_it.c ****   /* USER CODE END DMA1_Channel6_IRQn 0 */
 115:Src/stm32l4xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart2_rx);
 123              		.loc 1 115 0
 124 0002 0248     		ldr	r0, .L13
 125 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 126              	.LVL4:
 127 0008 08BD     		pop	{r3, pc}
 128              	.L14:
 129 000a 00BF     		.align	2
 130              	.L13:
 131 000c 00000000 		.word	hdma_usart2_rx
 132              		.cfi_endproc
 133              	.LFE128:
 135              		.section	.text.DMA1_Channel7_IRQHandler,"ax",%progbits
 136              		.align	2
 137              		.global	DMA1_Channel7_IRQHandler
 138              		.thumb
 139              		.thumb_func
 141              	DMA1_Channel7_IRQHandler:
 142              	.LFB129:
 116:Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
 117:Src/stm32l4xx_it.c **** 
 118:Src/stm32l4xx_it.c ****   /* USER CODE END DMA1_Channel6_IRQn 1 */
 119:Src/stm32l4xx_it.c **** }
 120:Src/stm32l4xx_it.c **** 
 121:Src/stm32l4xx_it.c **** /**
 122:Src/stm32l4xx_it.c **** * @brief This function handles DMA1 channel7 global interrupt.
 123:Src/stm32l4xx_it.c **** */
 124:Src/stm32l4xx_it.c **** void DMA1_Channel7_IRQHandler(void)
 125:Src/stm32l4xx_it.c **** {
 143              		.loc 1 125 0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147 0000 08B5     		push	{r3, lr}
 148              	.LCFI4:
 149              		.cfi_def_cfa_offset 8
 150              		.cfi_offset 3, -8
 151              		.cfi_offset 14, -4
 126:Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
 127:Src/stm32l4xx_it.c **** 
 128:Src/stm32l4xx_it.c ****   /* USER CODE END DMA1_Channel7_IRQn 0 */
 129:Src/stm32l4xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart2_tx);
 152              		.loc 1 129 0
 153 0002 0248     		ldr	r0, .L17
 154 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 155              	.LVL5:
 156 0008 08BD     		pop	{r3, pc}
 157              	.L18:
 158 000a 00BF     		.align	2
 159              	.L17:
 160 000c 00000000 		.word	hdma_usart2_tx
 161              		.cfi_endproc
 162              	.LFE129:
 164              		.section	.text.I2C1_EV_IRQHandler,"ax",%progbits
 165              		.align	2
 166              		.global	I2C1_EV_IRQHandler
ARM GAS  /tmp/ccBN37Sa.s 			page 6


 167              		.thumb
 168              		.thumb_func
 170              	I2C1_EV_IRQHandler:
 171              	.LFB130:
 130:Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */
 131:Src/stm32l4xx_it.c **** 
 132:Src/stm32l4xx_it.c ****   /* USER CODE END DMA1_Channel7_IRQn 1 */
 133:Src/stm32l4xx_it.c **** }
 134:Src/stm32l4xx_it.c **** 
 135:Src/stm32l4xx_it.c **** /**
 136:Src/stm32l4xx_it.c **** * @brief This function handles I2C1 event interrupt.
 137:Src/stm32l4xx_it.c **** */
 138:Src/stm32l4xx_it.c **** void I2C1_EV_IRQHandler(void)
 139:Src/stm32l4xx_it.c **** {
 172              		.loc 1 139 0
 173              		.cfi_startproc
 174              		@ args = 0, pretend = 0, frame = 0
 175              		@ frame_needed = 0, uses_anonymous_args = 0
 176 0000 08B5     		push	{r3, lr}
 177              	.LCFI5:
 178              		.cfi_def_cfa_offset 8
 179              		.cfi_offset 3, -8
 180              		.cfi_offset 14, -4
 140:Src/stm32l4xx_it.c ****   /* USER CODE BEGIN I2C1_EV_IRQn 0 */
 141:Src/stm32l4xx_it.c **** 
 142:Src/stm32l4xx_it.c ****   /* USER CODE END I2C1_EV_IRQn 0 */
 143:Src/stm32l4xx_it.c ****   HAL_I2C_EV_IRQHandler(&hi2c1);
 181              		.loc 1 143 0
 182 0002 0248     		ldr	r0, .L21
 183 0004 FFF7FEFF 		bl	HAL_I2C_EV_IRQHandler
 184              	.LVL6:
 185 0008 08BD     		pop	{r3, pc}
 186              	.L22:
 187 000a 00BF     		.align	2
 188              	.L21:
 189 000c 00000000 		.word	hi2c1
 190              		.cfi_endproc
 191              	.LFE130:
 193              		.section	.text.I2C1_ER_IRQHandler,"ax",%progbits
 194              		.align	2
 195              		.global	I2C1_ER_IRQHandler
 196              		.thumb
 197              		.thumb_func
 199              	I2C1_ER_IRQHandler:
 200              	.LFB131:
 144:Src/stm32l4xx_it.c ****   /* USER CODE BEGIN I2C1_EV_IRQn 1 */
 145:Src/stm32l4xx_it.c **** 
 146:Src/stm32l4xx_it.c ****   /* USER CODE END I2C1_EV_IRQn 1 */
 147:Src/stm32l4xx_it.c **** }
 148:Src/stm32l4xx_it.c **** 
 149:Src/stm32l4xx_it.c **** /**
 150:Src/stm32l4xx_it.c **** * @brief This function handles I2C1 error interrupt.
 151:Src/stm32l4xx_it.c **** */
 152:Src/stm32l4xx_it.c **** void I2C1_ER_IRQHandler(void)
 153:Src/stm32l4xx_it.c **** {
 201              		.loc 1 153 0
 202              		.cfi_startproc
ARM GAS  /tmp/ccBN37Sa.s 			page 7


 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205 0000 08B5     		push	{r3, lr}
 206              	.LCFI6:
 207              		.cfi_def_cfa_offset 8
 208              		.cfi_offset 3, -8
 209              		.cfi_offset 14, -4
 154:Src/stm32l4xx_it.c ****   /* USER CODE BEGIN I2C1_ER_IRQn 0 */
 155:Src/stm32l4xx_it.c **** 
 156:Src/stm32l4xx_it.c ****   /* USER CODE END I2C1_ER_IRQn 0 */
 157:Src/stm32l4xx_it.c ****   HAL_I2C_ER_IRQHandler(&hi2c1);
 210              		.loc 1 157 0
 211 0002 0248     		ldr	r0, .L25
 212 0004 FFF7FEFF 		bl	HAL_I2C_ER_IRQHandler
 213              	.LVL7:
 214 0008 08BD     		pop	{r3, pc}
 215              	.L26:
 216 000a 00BF     		.align	2
 217              	.L25:
 218 000c 00000000 		.word	hi2c1
 219              		.cfi_endproc
 220              	.LFE131:
 222              		.section	.text.USART1_IRQHandler,"ax",%progbits
 223              		.align	2
 224              		.global	USART1_IRQHandler
 225              		.thumb
 226              		.thumb_func
 228              	USART1_IRQHandler:
 229              	.LFB132:
 158:Src/stm32l4xx_it.c ****   /* USER CODE BEGIN I2C1_ER_IRQn 1 */
 159:Src/stm32l4xx_it.c **** 
 160:Src/stm32l4xx_it.c ****   /* USER CODE END I2C1_ER_IRQn 1 */
 161:Src/stm32l4xx_it.c **** }
 162:Src/stm32l4xx_it.c **** 
 163:Src/stm32l4xx_it.c **** /**
 164:Src/stm32l4xx_it.c **** * @brief This function handles USART1 global interrupt.
 165:Src/stm32l4xx_it.c **** */
 166:Src/stm32l4xx_it.c **** void USART1_IRQHandler(void)
 167:Src/stm32l4xx_it.c **** {
 230              		.loc 1 167 0
 231              		.cfi_startproc
 232              		@ args = 0, pretend = 0, frame = 0
 233              		@ frame_needed = 0, uses_anonymous_args = 0
 234 0000 08B5     		push	{r3, lr}
 235              	.LCFI7:
 236              		.cfi_def_cfa_offset 8
 237              		.cfi_offset 3, -8
 238              		.cfi_offset 14, -4
 168:Src/stm32l4xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 169:Src/stm32l4xx_it.c **** 
 170:Src/stm32l4xx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 171:Src/stm32l4xx_it.c ****   HAL_UART_IRQHandler(&huart1);
 239              		.loc 1 171 0
 240 0002 0248     		ldr	r0, .L29
 241 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 242              	.LVL8:
 243 0008 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccBN37Sa.s 			page 8


 244              	.L30:
 245 000a 00BF     		.align	2
 246              	.L29:
 247 000c 00000000 		.word	huart1
 248              		.cfi_endproc
 249              	.LFE132:
 251              		.section	.text.USART2_IRQHandler,"ax",%progbits
 252              		.align	2
 253              		.global	USART2_IRQHandler
 254              		.thumb
 255              		.thumb_func
 257              	USART2_IRQHandler:
 258              	.LFB133:
 172:Src/stm32l4xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 1 */
 173:Src/stm32l4xx_it.c **** 
 174:Src/stm32l4xx_it.c ****   /* USER CODE END USART1_IRQn 1 */
 175:Src/stm32l4xx_it.c **** }
 176:Src/stm32l4xx_it.c **** 
 177:Src/stm32l4xx_it.c **** /**
 178:Src/stm32l4xx_it.c **** * @brief This function handles USART2 global interrupt.
 179:Src/stm32l4xx_it.c **** */
 180:Src/stm32l4xx_it.c **** void USART2_IRQHandler(void)
 181:Src/stm32l4xx_it.c **** {
 259              		.loc 1 181 0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263 0000 08B5     		push	{r3, lr}
 264              	.LCFI8:
 265              		.cfi_def_cfa_offset 8
 266              		.cfi_offset 3, -8
 267              		.cfi_offset 14, -4
 182:Src/stm32l4xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 0 */
 183:Src/stm32l4xx_it.c **** 
 184:Src/stm32l4xx_it.c ****   /* USER CODE END USART2_IRQn 0 */
 185:Src/stm32l4xx_it.c ****   HAL_UART_IRQHandler(&huart2);
 268              		.loc 1 185 0
 269 0002 0248     		ldr	r0, .L33
 270 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 271              	.LVL9:
 272 0008 08BD     		pop	{r3, pc}
 273              	.L34:
 274 000a 00BF     		.align	2
 275              	.L33:
 276 000c 00000000 		.word	huart2
 277              		.cfi_endproc
 278              	.LFE133:
 280              		.section	.text.DMA2_Channel6_IRQHandler,"ax",%progbits
 281              		.align	2
 282              		.global	DMA2_Channel6_IRQHandler
 283              		.thumb
 284              		.thumb_func
 286              	DMA2_Channel6_IRQHandler:
 287              	.LFB134:
 186:Src/stm32l4xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 1 */
 187:Src/stm32l4xx_it.c **** 
 188:Src/stm32l4xx_it.c ****   /* USER CODE END USART2_IRQn 1 */
ARM GAS  /tmp/ccBN37Sa.s 			page 9


 189:Src/stm32l4xx_it.c **** }
 190:Src/stm32l4xx_it.c **** 
 191:Src/stm32l4xx_it.c **** /**
 192:Src/stm32l4xx_it.c **** * @brief This function handles DMA2 channel6 global interrupt.
 193:Src/stm32l4xx_it.c **** */
 194:Src/stm32l4xx_it.c **** void DMA2_Channel6_IRQHandler(void)
 195:Src/stm32l4xx_it.c **** {
 288              		.loc 1 195 0
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 0
 291              		@ frame_needed = 0, uses_anonymous_args = 0
 292 0000 08B5     		push	{r3, lr}
 293              	.LCFI9:
 294              		.cfi_def_cfa_offset 8
 295              		.cfi_offset 3, -8
 296              		.cfi_offset 14, -4
 196:Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */
 197:Src/stm32l4xx_it.c **** 
 198:Src/stm32l4xx_it.c ****   /* USER CODE END DMA2_Channel6_IRQn 0 */
 199:Src/stm32l4xx_it.c ****   HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 297              		.loc 1 199 0
 298 0002 0248     		ldr	r0, .L37
 299 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 300              	.LVL10:
 301 0008 08BD     		pop	{r3, pc}
 302              	.L38:
 303 000a 00BF     		.align	2
 304              	.L37:
 305 000c 00000000 		.word	hdma_i2c1_rx
 306              		.cfi_endproc
 307              	.LFE134:
 309              		.section	.text.DMA2_Channel7_IRQHandler,"ax",%progbits
 310              		.align	2
 311              		.global	DMA2_Channel7_IRQHandler
 312              		.thumb
 313              		.thumb_func
 315              	DMA2_Channel7_IRQHandler:
 316              	.LFB135:
 200:Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */
 201:Src/stm32l4xx_it.c **** 
 202:Src/stm32l4xx_it.c ****   /* USER CODE END DMA2_Channel6_IRQn 1 */
 203:Src/stm32l4xx_it.c **** }
 204:Src/stm32l4xx_it.c **** 
 205:Src/stm32l4xx_it.c **** /**
 206:Src/stm32l4xx_it.c **** * @brief This function handles DMA2 channel7 global interrupt.
 207:Src/stm32l4xx_it.c **** */
 208:Src/stm32l4xx_it.c **** void DMA2_Channel7_IRQHandler(void)
 209:Src/stm32l4xx_it.c **** {
 317              		.loc 1 209 0
 318              		.cfi_startproc
 319              		@ args = 0, pretend = 0, frame = 0
 320              		@ frame_needed = 0, uses_anonymous_args = 0
 321 0000 08B5     		push	{r3, lr}
 322              	.LCFI10:
 323              		.cfi_def_cfa_offset 8
 324              		.cfi_offset 3, -8
 325              		.cfi_offset 14, -4
ARM GAS  /tmp/ccBN37Sa.s 			page 10


 210:Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */
 211:Src/stm32l4xx_it.c **** 
 212:Src/stm32l4xx_it.c ****   /* USER CODE END DMA2_Channel7_IRQn 0 */
 213:Src/stm32l4xx_it.c ****   HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 326              		.loc 1 213 0
 327 0002 0248     		ldr	r0, .L41
 328 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 329              	.LVL11:
 330 0008 08BD     		pop	{r3, pc}
 331              	.L42:
 332 000a 00BF     		.align	2
 333              	.L41:
 334 000c 00000000 		.word	hdma_i2c1_tx
 335              		.cfi_endproc
 336              	.LFE135:
 338              		.text
 339              	.Letext0:
 340              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 341              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 342              		.file 4 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l432xx.h"
 343              		.file 5 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 344              		.file 6 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
 345              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_i2c.h"
 346              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
 347              		.file 9 "Drivers/CMSIS/Include/core_cm4.h"
 348              		.file 10 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
 349              		.file 11 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_cortex.h"
ARM GAS  /tmp/ccBN37Sa.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l4xx_it.c
     /tmp/ccBN37Sa.s:21     .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccBN37Sa.s:26     .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccBN37Sa.s:49     .text.DMA1_Channel4_IRQHandler:0000000000000000 $t
     /tmp/ccBN37Sa.s:54     .text.DMA1_Channel4_IRQHandler:0000000000000000 DMA1_Channel4_IRQHandler
     /tmp/ccBN37Sa.s:73     .text.DMA1_Channel4_IRQHandler:000000000000000c $d
     /tmp/ccBN37Sa.s:78     .text.DMA1_Channel5_IRQHandler:0000000000000000 $t
     /tmp/ccBN37Sa.s:83     .text.DMA1_Channel5_IRQHandler:0000000000000000 DMA1_Channel5_IRQHandler
     /tmp/ccBN37Sa.s:102    .text.DMA1_Channel5_IRQHandler:000000000000000c $d
     /tmp/ccBN37Sa.s:107    .text.DMA1_Channel6_IRQHandler:0000000000000000 $t
     /tmp/ccBN37Sa.s:112    .text.DMA1_Channel6_IRQHandler:0000000000000000 DMA1_Channel6_IRQHandler
     /tmp/ccBN37Sa.s:131    .text.DMA1_Channel6_IRQHandler:000000000000000c $d
     /tmp/ccBN37Sa.s:136    .text.DMA1_Channel7_IRQHandler:0000000000000000 $t
     /tmp/ccBN37Sa.s:141    .text.DMA1_Channel7_IRQHandler:0000000000000000 DMA1_Channel7_IRQHandler
     /tmp/ccBN37Sa.s:160    .text.DMA1_Channel7_IRQHandler:000000000000000c $d
     /tmp/ccBN37Sa.s:165    .text.I2C1_EV_IRQHandler:0000000000000000 $t
     /tmp/ccBN37Sa.s:170    .text.I2C1_EV_IRQHandler:0000000000000000 I2C1_EV_IRQHandler
     /tmp/ccBN37Sa.s:189    .text.I2C1_EV_IRQHandler:000000000000000c $d
     /tmp/ccBN37Sa.s:194    .text.I2C1_ER_IRQHandler:0000000000000000 $t
     /tmp/ccBN37Sa.s:199    .text.I2C1_ER_IRQHandler:0000000000000000 I2C1_ER_IRQHandler
     /tmp/ccBN37Sa.s:218    .text.I2C1_ER_IRQHandler:000000000000000c $d
     /tmp/ccBN37Sa.s:223    .text.USART1_IRQHandler:0000000000000000 $t
     /tmp/ccBN37Sa.s:228    .text.USART1_IRQHandler:0000000000000000 USART1_IRQHandler
     /tmp/ccBN37Sa.s:247    .text.USART1_IRQHandler:000000000000000c $d
     /tmp/ccBN37Sa.s:252    .text.USART2_IRQHandler:0000000000000000 $t
     /tmp/ccBN37Sa.s:257    .text.USART2_IRQHandler:0000000000000000 USART2_IRQHandler
     /tmp/ccBN37Sa.s:276    .text.USART2_IRQHandler:000000000000000c $d
     /tmp/ccBN37Sa.s:281    .text.DMA2_Channel6_IRQHandler:0000000000000000 $t
     /tmp/ccBN37Sa.s:286    .text.DMA2_Channel6_IRQHandler:0000000000000000 DMA2_Channel6_IRQHandler
     /tmp/ccBN37Sa.s:305    .text.DMA2_Channel6_IRQHandler:000000000000000c $d
     /tmp/ccBN37Sa.s:310    .text.DMA2_Channel7_IRQHandler:0000000000000000 $t
     /tmp/ccBN37Sa.s:315    .text.DMA2_Channel7_IRQHandler:0000000000000000 DMA2_Channel7_IRQHandler
     /tmp/ccBN37Sa.s:334    .text.DMA2_Channel7_IRQHandler:000000000000000c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_SYSTICK_IRQHandler
HAL_DMA_IRQHandler
hdma_usart1_tx
hdma_usart1_rx
hdma_usart2_rx
hdma_usart2_tx
HAL_I2C_EV_IRQHandler
hi2c1
HAL_I2C_ER_IRQHandler
HAL_UART_IRQHandler
huart1
huart2
hdma_i2c1_rx
hdma_i2c1_tx
